'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ProHelp")>  _
Partial Public Class DBCreateDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertt_file(instance As t_file)
    End Sub
  Partial Private Sub Updatet_file(instance As t_file)
    End Sub
  Partial Private Sub Deletet_file(instance As t_file)
    End Sub
  Partial Private Sub Insertt_playlist(instance As t_playlist)
    End Sub
  Partial Private Sub Updatet_playlist(instance As t_playlist)
    End Sub
  Partial Private Sub Deletet_playlist(instance As t_playlist)
    End Sub
  Partial Private Sub Inserttx_playlist_song(instance As tx_playlist_song)
    End Sub
  Partial Private Sub Updatetx_playlist_song(instance As tx_playlist_song)
    End Sub
  Partial Private Sub Deletetx_playlist_song(instance As tx_playlist_song)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.PPLInk.My.MySettings.Default.ProHelpConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property t_files() As System.Data.Linq.Table(Of t_file)
		Get
			Return Me.GetTable(Of t_file)
		End Get
	End Property
	
	Public ReadOnly Property t_playlists() As System.Data.Linq.Table(Of t_playlist)
		Get
			Return Me.GetTable(Of t_playlist)
		End Get
	End Property
	
	Public ReadOnly Property tx_playlist_songs() As System.Data.Linq.Table(Of tx_playlist_song)
		Get
			Return Me.GetTable(Of tx_playlist_song)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.StripPunc", IsComposable:=true)>  _
	Public Function StripPunc(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal s_input As String) As String
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), s_input).ReturnValue,String)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateTriggers")>  _
	Public Function CreateTriggers() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t_files")>  _
Partial Public Class t_file
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _file_no As Integer
	
	Private _f_name As String
	
	Private _f_path As String
	
	Private _f_altname As String
	
	Private _selected As System.Nullable(Of Char)
	
	Private _create_dt As Date
	
	Private _last_dt As System.Nullable(Of Date)
	
	Private _last_action As String
	
	Private _inactive As Char
	
	Private _s_search As String
	
	Private _tx_playlist_songs As EntitySet(Of tx_playlist_song)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onfile_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onfile_noChanged()
    End Sub
    Partial Private Sub Onf_nameChanging(value As String)
    End Sub
    Partial Private Sub Onf_nameChanged()
    End Sub
    Partial Private Sub Onf_pathChanging(value As String)
    End Sub
    Partial Private Sub Onf_pathChanged()
    End Sub
    Partial Private Sub Onf_altnameChanging(value As String)
    End Sub
    Partial Private Sub Onf_altnameChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    Partial Private Sub Oncreate_dtChanging(value As Date)
    End Sub
    Partial Private Sub Oncreate_dtChanged()
    End Sub
    Partial Private Sub Onlast_dtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_dtChanged()
    End Sub
    Partial Private Sub Onlast_actionChanging(value As String)
    End Sub
    Partial Private Sub Onlast_actionChanged()
    End Sub
    Partial Private Sub OninactiveChanging(value As Char)
    End Sub
    Partial Private Sub OninactiveChanged()
    End Sub
    Partial Private Sub Ons_searchChanging(value As String)
    End Sub
    Partial Private Sub Ons_searchChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tx_playlist_songs = New EntitySet(Of tx_playlist_song)(AddressOf Me.attach_tx_playlist_songs, AddressOf Me.detach_tx_playlist_songs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_no", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property file_no() As Integer
		Get
			Return Me._file_no
		End Get
		Set
			If ((Me._file_no = value)  _
						= false) Then
				Me.Onfile_noChanging(value)
				Me.SendPropertyChanging
				Me._file_no = value
				Me.SendPropertyChanged("file_no")
				Me.Onfile_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_f_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property f_name() As String
		Get
			Return Me._f_name
		End Get
		Set
			If (String.Equals(Me._f_name, value) = false) Then
				Me.Onf_nameChanging(value)
				Me.SendPropertyChanging
				Me._f_name = value
				Me.SendPropertyChanged("f_name")
				Me.Onf_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_f_path", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property f_path() As String
		Get
			Return Me._f_path
		End Get
		Set
			If (String.Equals(Me._f_path, value) = false) Then
				Me.Onf_pathChanging(value)
				Me.SendPropertyChanging
				Me._f_path = value
				Me.SendPropertyChanged("f_path")
				Me.Onf_pathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_f_altname", DbType:="VarChar(250)")>  _
	Public Property f_altname() As String
		Get
			Return Me._f_altname
		End Get
		Set
			If (String.Equals(Me._f_altname, value) = false) Then
				Me.Onf_altnameChanging(value)
				Me.SendPropertyChanging
				Me._f_altname = value
				Me.SendPropertyChanged("f_altname")
				Me.Onf_altnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="Char(1)")>  _
	Public Property selected() As System.Nullable(Of Char)
		Get
			Return Me._selected
		End Get
		Set
			If (Me._selected.Equals(value) = false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_create_dt", DbType:="DateTime NOT NULL")>  _
	Public Property create_dt() As Date
		Get
			Return Me._create_dt
		End Get
		Set
			If ((Me._create_dt = value)  _
						= false) Then
				Me.Oncreate_dtChanging(value)
				Me.SendPropertyChanging
				Me._create_dt = value
				Me.SendPropertyChanged("create_dt")
				Me.Oncreate_dtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_dt", DbType:="DateTime")>  _
	Public Property last_dt() As System.Nullable(Of Date)
		Get
			Return Me._last_dt
		End Get
		Set
			If (Me._last_dt.Equals(value) = false) Then
				Me.Onlast_dtChanging(value)
				Me.SendPropertyChanging
				Me._last_dt = value
				Me.SendPropertyChanged("last_dt")
				Me.Onlast_dtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_action", DbType:="VarChar(30)")>  _
	Public Property last_action() As String
		Get
			Return Me._last_action
		End Get
		Set
			If (String.Equals(Me._last_action, value) = false) Then
				Me.Onlast_actionChanging(value)
				Me.SendPropertyChanging
				Me._last_action = value
				Me.SendPropertyChanged("last_action")
				Me.Onlast_actionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive", DbType:="Char(1) NOT NULL")>  _
	Public Property inactive() As Char
		Get
			Return Me._inactive
		End Get
		Set
			If ((Me._inactive = value)  _
						= false) Then
				Me.OninactiveChanging(value)
				Me.SendPropertyChanging
				Me._inactive = value
				Me.SendPropertyChanged("inactive")
				Me.OninactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_s_search", DbType:="VarChar(400)")>  _
	Public Property s_search() As String
		Get
			Return Me._s_search
		End Get
		Set
			If (String.Equals(Me._s_search, value) = false) Then
				Me.Ons_searchChanging(value)
				Me.SendPropertyChanging
				Me._s_search = value
				Me.SendPropertyChanged("s_search")
				Me.Ons_searchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t_file_tx_playlist_song", Storage:="_tx_playlist_songs", ThisKey:="file_no", OtherKey:="file_no")>  _
	Public Property tx_playlist_songs() As EntitySet(Of tx_playlist_song)
		Get
			Return Me._tx_playlist_songs
		End Get
		Set
			Me._tx_playlist_songs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tx_playlist_songs(ByVal entity As tx_playlist_song)
		Me.SendPropertyChanging
		entity.t_file = Me
	End Sub
	
	Private Sub detach_tx_playlist_songs(ByVal entity As tx_playlist_song)
		Me.SendPropertyChanging
		entity.t_file = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t_playlists")>  _
Partial Public Class t_playlist
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _list_no As Integer
	
	Private _play_dt As System.Nullable(Of Date)
	
	Private _l_name As String
	
	Private _tx_playlist_songs As EntitySet(Of tx_playlist_song)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onlist_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onlist_noChanged()
    End Sub
    Partial Private Sub Onplay_dtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onplay_dtChanged()
    End Sub
    Partial Private Sub Onl_nameChanging(value As String)
    End Sub
    Partial Private Sub Onl_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tx_playlist_songs = New EntitySet(Of tx_playlist_song)(AddressOf Me.attach_tx_playlist_songs, AddressOf Me.detach_tx_playlist_songs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_list_no", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property list_no() As Integer
		Get
			Return Me._list_no
		End Get
		Set
			If ((Me._list_no = value)  _
						= false) Then
				Me.Onlist_noChanging(value)
				Me.SendPropertyChanging
				Me._list_no = value
				Me.SendPropertyChanged("list_no")
				Me.Onlist_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_play_dt", DbType:="DateTime")>  _
	Public Property play_dt() As System.Nullable(Of Date)
		Get
			Return Me._play_dt
		End Get
		Set
			If (Me._play_dt.Equals(value) = false) Then
				Me.Onplay_dtChanging(value)
				Me.SendPropertyChanging
				Me._play_dt = value
				Me.SendPropertyChanged("play_dt")
				Me.Onplay_dtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_l_name", DbType:="VarChar(30)")>  _
	Public Property l_name() As String
		Get
			Return Me._l_name
		End Get
		Set
			If (String.Equals(Me._l_name, value) = false) Then
				Me.Onl_nameChanging(value)
				Me.SendPropertyChanging
				Me._l_name = value
				Me.SendPropertyChanged("l_name")
				Me.Onl_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t_playlist_tx_playlist_song", Storage:="_tx_playlist_songs", ThisKey:="list_no", OtherKey:="list_no")>  _
	Public Property tx_playlist_songs() As EntitySet(Of tx_playlist_song)
		Get
			Return Me._tx_playlist_songs
		End Get
		Set
			Me._tx_playlist_songs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tx_playlist_songs(ByVal entity As tx_playlist_song)
		Me.SendPropertyChanging
		entity.t_playlist = Me
	End Sub
	
	Private Sub detach_tx_playlist_songs(ByVal entity As tx_playlist_song)
		Me.SendPropertyChanging
		entity.t_playlist = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tx_playlist_song")>  _
Partial Public Class tx_playlist_song
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_no As Integer
	
	Private _list_no As Integer
	
	Private _seq_no As Integer
	
	Private _file_no As Integer
	
	Private _t_file As EntityRef(Of t_file)
	
	Private _t_playlist As EntityRef(Of t_playlist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_noChanged()
    End Sub
    Partial Private Sub Onlist_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onlist_noChanged()
    End Sub
    Partial Private Sub Onseq_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onseq_noChanged()
    End Sub
    Partial Private Sub Onfile_noChanging(value As Integer)
    End Sub
    Partial Private Sub Onfile_noChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t_file = CType(Nothing, EntityRef(Of t_file))
		Me._t_playlist = CType(Nothing, EntityRef(Of t_playlist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_no", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_no() As Integer
		Get
			Return Me._rec_no
		End Get
		Set
			If ((Me._rec_no = value)  _
						= false) Then
				Me.Onrec_noChanging(value)
				Me.SendPropertyChanging
				Me._rec_no = value
				Me.SendPropertyChanged("rec_no")
				Me.Onrec_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_list_no", DbType:="Int NOT NULL")>  _
	Public Property list_no() As Integer
		Get
			Return Me._list_no
		End Get
		Set
			If ((Me._list_no = value)  _
						= false) Then
				If Me._t_playlist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onlist_noChanging(value)
				Me.SendPropertyChanging
				Me._list_no = value
				Me.SendPropertyChanged("list_no")
				Me.Onlist_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seq_no", DbType:="Int NOT NULL")>  _
	Public Property seq_no() As Integer
		Get
			Return Me._seq_no
		End Get
		Set
			If ((Me._seq_no = value)  _
						= false) Then
				Me.Onseq_noChanging(value)
				Me.SendPropertyChanging
				Me._seq_no = value
				Me.SendPropertyChanged("seq_no")
				Me.Onseq_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_no", DbType:="Int NOT NULL")>  _
	Public Property file_no() As Integer
		Get
			Return Me._file_no
		End Get
		Set
			If ((Me._file_no = value)  _
						= false) Then
				If Me._t_file.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onfile_noChanging(value)
				Me.SendPropertyChanging
				Me._file_no = value
				Me.SendPropertyChanged("file_no")
				Me.Onfile_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t_file_tx_playlist_song", Storage:="_t_file", ThisKey:="file_no", OtherKey:="file_no", IsForeignKey:=true)>  _
	Public Property t_file() As t_file
		Get
			Return Me._t_file.Entity
		End Get
		Set
			Dim previousValue As t_file = Me._t_file.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t_file.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t_file.Entity = Nothing
					previousValue.tx_playlist_songs.Remove(Me)
				End If
				Me._t_file.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tx_playlist_songs.Add(Me)
					Me._file_no = value.file_no
				Else
					Me._file_no = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("t_file")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t_playlist_tx_playlist_song", Storage:="_t_playlist", ThisKey:="list_no", OtherKey:="list_no", IsForeignKey:=true)>  _
	Public Property t_playlist() As t_playlist
		Get
			Return Me._t_playlist.Entity
		End Get
		Set
			Dim previousValue As t_playlist = Me._t_playlist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t_playlist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t_playlist.Entity = Nothing
					previousValue.tx_playlist_songs.Remove(Me)
				End If
				Me._t_playlist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tx_playlist_songs.Add(Me)
					Me._list_no = value.list_no
				Else
					Me._list_no = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("t_playlist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
